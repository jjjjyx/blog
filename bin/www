#!/usr/bin/env node

/**
 * Module dependencies.
 */
// const dataSource = require("../src/models");
const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const models = require('../src/models');


/**
 * Get port from environment and store in Express.
 */

let {appPort: port} = config;
app.set('port', port);
console.log()

models.sequelize.sync().then(()=>{
    debug("Loading Mysql Database");
    listen()
});

let server = http.createServer(app);
function listen() {
    /**
     * Create HTTP server.
     */

    server.listen(port);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.on('error', onError);
    server.on('listening', onListening);
}
// dataSource.on()
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let host = addr.address;
    let port = addr.port;
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log(`app (${IS_DEV?'dev':'production'}) listening at  http://localhost:${port}`);
}