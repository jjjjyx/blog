#!/usr/bin/env node

/**
 * Module dependencies.
 */
// const dataSource = require("../src/models");
const log4js = require('log4js');
log4js.configure('./log4js.json');
const log = log4js.getLogger("startup");
const http = require('http')
const {sequelize} = require('../src/models')

/**
 * Get port from environment and store in Express.
 */
// 初始化加载options 数据
const app = require('../app')
let {appPort: port} = config
app.set('port', port)

sequelize.authenticate().then(() => {
    log.info('连接数据库成功！')
    return require('../src/before-listen.js')(app)
}).then(listen).catch((e) => {
    log.error('连接数据库失败，请检查数据库链接， 程序已退出。', e)
    process.exit(1)
})

function listen () {

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError (error) {
        if (error.syscall !== 'listen') {
            throw error
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port

        // handle specific listen errors with friendly messages
        switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges', error)
            process.exit(1)
            break
        case 'EADDRINUSE':
            log.error(bind + ' is already in use', error)
            process.exit(1)
            break
        default:
            throw error
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening () {
        let addr = server.address()
        // let host = addr.address
        let port = addr.port
        // let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
        // debug('Listening on ' + bind)
        log.info(`app (${IS_DEV ? 'dev' : 'production'}) listening at http://localhost:${port}`)
    }

    /**
     * Create HTTP server.
     */
    let server = http.createServer(app)

    server.listen(port)

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.on('error', onError)
    server.on('listening', onListening)
}
